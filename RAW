import requests
from requests.auth import HTTPBasicAuth

# Qualys API credentials
qualys_api_url = "https://<your_qualys_api_base_url>/api/2.0/fo/asset/host/vm/detection/"
qualys_username = "your_qualys_username"
qualys_password = "your_qualys_password"
headers = {
    'X-Requested-With': 'Python requests',
    'Content-Type': 'application/json',
    'Authorization': 'Basic <base64_encoded_credentials>',
}
response = requests.get(url, headers=headers)
print(response.json())
# Jira API credentials
jira_api_url = "https://your_jira_instance.atlassian.net/rest/api/3/issue/"
jira_username = "your_jira_email"
jira_api_token = "your_jira_api_token"

# Fetch vulnerabilities from Qualys
response = requests.get(
    qualys_api_url,
    auth=HTTPBasicAuth(qualys_username, qualys_password),
    params={
        "action": "list",
        "output_format": "json",
    }
)

# Print the response status code and content for debugging
print(f"Response Status Code: {response.status_code}")
print("Qualys API response content:")
print(response.content)

# Check if the response is empty or not in JSON format
if response.status_code == 200:
    try:
        response_json = response.json()
        vulnerabilities = response_json.get("HOST_LIST_VM_DETECTION_OUTPUT", {}).get("RESPONSE", {}).get("HOST_LIST", [])
    except ValueError as e:
        print("Failed to decode JSON response:", e)
        vulnerabilities = []
else:
    print("Failed to fetch data from Qualys API")
    vulnerabilities = []

# Create Jira issues for each vulnerability
for vulnerability in vulnerabilities:
    issue_data = {
        "fields": {
            "project": {
                "key": "YOUR_PROJECT_KEY"
            },
            "summary": f"Vulnerability: {vulnerability['QID']}",
            "description": f"Detected on host: {vulnerability['IP']} - {vulnerability['DNS']}",
            "issuetype": {
                "name": "Bug"
            }
        }
    }
    
    response = requests.post(
        jira_api_url,
        json=issue_data,
        auth=HTTPBasicAuth(jira_username, jira_api_token)
    )
    
    if response.status_code == 201:
        print(f"Created Jira issue for vulnerability {vulnerability['QID']}")
    else:
        print(f"Failed to create Jira issue: {response.content}")

print("Integration complete.")
